import { gql } from "graphql-tag";

export const matchRoomTypeDefs = gql`
# üîπ Enum Status (—è–ª–∞–≥—á update —Ö–∏–π—Ö—ç–¥ –∞—à–∏–≥–ª–∞–∂ –±–æ–ª–æ—Ö–æ–æ—Ä)
enum MatchStatus {
  PENDING
  COMPLETED
}
type Response {
  success: Boolean!
  message: String
}

# üîπ MatchRoom Type
type MatchRoom {
  id: ID!
  task: String!          # –¢–æ–≥–ª–æ–ª—Ç—ã–Ω –Ω—ç—Ä, –∂–∏—à—ç—ç: "Quarterfinals Match 1"
  round: String!         # –®–∞—Ç–Ω—ã –Ω—ç—Ä: "Quarterfinals", "Semifinals", "Finals"
  scheduleAt: String!    # –¢–æ–≥–ª–æ–ª—Ç —ç—Ö–ª—ç—Ö —Ü–∞–≥
  slotA: ID!        # –û—Ä–æ–ª—Ü–æ–≥—á A
  slotB: ID!        # –û—Ä–æ–ª—Ü–æ–≥—á B
  winner: ID        # –Ø–ª–∞–≥—á (—Ç–æ–≥–ª–æ–ª—Ç –¥—É—É—Å—Å–∞–Ω—ã –¥–∞—Ä–∞–∞ fill —Ö–∏–π–Ω—ç)
  loser: ID         # –•—É–≤—å—á–∏–Ω (—Ç–æ–≥–ª–æ–ª—Ç –¥—É—É—Å—Å–∞–Ω—ã –¥–∞—Ä–∞–∞ fill —Ö–∏–π–Ω—ç)
  tournamentId: ID!      # –•–∞–º–∞–∞—Ä–∞—Ö Tournament
  status: MatchStatus!   # –¢–æ–≥–ª–æ–ª—Ç—ã–Ω —Ç”©–ª”©–≤
}

# üîπ Input Types
input CreateMatchInput {
  task: String!
  scheduleAt: String!
  slotA: ID!
  slotB: ID!
  tournamentId: ID!
}

input UpdateWinnerInput {
  matchId: ID!
  winnerId: ID!
  loserId: ID!
}

# üîπ Mutations
type Mutation {
  createMatch(input: CreateMatchInput!): Response!
  updateWinner(input: UpdateWinnerInput!): Response!
}

# üîπ Queries
type Query {
  getMatchRooms(tournamentId: ID!): [MatchRoom!]!
  getMatchRoom(id: ID!): MatchRoom
}

`;